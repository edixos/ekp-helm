ingressNginx:  
  nameOverride: "ingress-nginx"
  fullnameOverride: "ingress-nginx"

  controller:
    name: controller
    image:
      registry: registry.k8s.io
      image: ingress-nginx/controller
      tag: "v1.12.1"
      digest: sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
      pullPolicy: IfNotPresent
      runAsNonRoot: true
      runAsUser: 101
      runAsGroup: 82
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      readOnlyRootFilesystem: false

    replicaCount: 2
    minAvailable: 1

    config:
      worker-processes: "auto"
      worker-shutdown-timeout: "240s"
      upstream-keepalive-connections: "100"
      upstream-keepalive-timeout: "60s"
      upstream-keepalive-requests: "1000"
      keep-alive: "75s"
      keep-alive-requests: "1000"
      client-header-buffer-size: "16k"
      large-client-header-buffers: "4 32k"
      http2-max-field-size: "16k"
      http2-max-header-size: "32k"
      proxy-buffer-size: "16k"
      proxy-buffers: "4 32k"
      proxy-body-size: "20m"
      proxy-read-timeout: "60s"
      proxy-send-timeout: "60s"
      use-forwarded-headers: "true"
      enable-real-ip: "true"
      compute-full-forwarded-for: "true"
      use-proxy-protocol: "false"
      server-tokens: "false"
      ssl-protocols: "TLSv1.2 TLSv1.3"
      ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
      # force-ssl-redirect: "true"
      # ssl-redirect: "true"

    resources:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "2000m"
        memory: "2Gi"

    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 70
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 50
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 60
          policies:
          - type: Percent
            value: 100
            periodSeconds: 60

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: ekp-prometheus-operator

    service:
      enabled: true
      external:
        enabled: true
      type: LoadBalancer
      annotations:
        networking.gke.io/load-balancer-type: "External"
        networking.gke.io/max-rate-per-instance: "4000"
      # FOR TESTING
      loadBalancerSourceRanges:
        - 0.0.0.0/0
      externalTrafficPolicy: Local

    nodeSelector:
      kubernetes.io/os: linux
      cloud.google.com/gke-nodepool: ekp-dev-node-pool-1

    tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"

    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: [ingress-nginx]
            topologyKey: kubernetes.io/hostname

    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx

    livenessProbe:
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5

    readinessProbe:
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3

    admissionWebhooks:
      enabled: true
      failurePolicy: Fail
      patch:
        enabled: true
        image:
          tag: v1.5.2
          digest: sha256:e8825994b7a2c7497375a9b945f386506ca6a3eda80b89b74ef2db743f66a5ea
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
        containerSecurityContext:
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true

  rbac:
    create: true

  serviceAccount:
    create: true
    automountServiceAccountToken: true

  defaultBackend:
    enabled: false
